---
- hosts: "{{ workspace | default ( lookup('env', 'KUBEFACTORY_WORKSPACE') ) }}"
  become: no
  gather_facts: no
  strategy: linear

  vars:
    tf_action: apply
    src_terraform_dir: "{{ (playbook_dir + '/../') | realpath }}/terraform/kapsule"
    terraform_dir: "{{ workspace_terraform_dir }}/kapsule"
    block_marker: >-
      # {mark} -- {{ workspace }} -- {{ kapsule_name }}

  tasks:
    - import_tasks: "{{ playbook_dir }}/inc/_tf_sanity_checks.yml"

    - name: Checking kapsule name
      assert:
        that:
          - kapsule_name is defined
          - (kapsule_name | length) > 0
          - not ' ' in kapsule_name
        msg: >-
          'kapsule_name' must be defined, non-empty and not contain whitespace

    - name: Copy terraform sources
      delegate_to: localhost
      copy:
        src: "{{ src_terraform_dir }}"
        dest: "{{ workspace_terraform_dir }}"
      when: tf_action == 'apply'

    - name: "Apply workspace {{ workspace }} on {{ tf_stack }}"
      delegate_to: localhost
      terraform:
        project_path: "{{ terraform_dir }}"
        state: "{{ (tf_action == 'destroy') | ternary('absent', 'present') }}"
        force_init: true
        workspace: "{{ workspace }}_{{ kapsule_name }}"
      register: tf_apply

    - name: Render kubeconfig file
      delegate_to: localhost
      copy:
        dest: "{{ workspace_secrets_dir }}/{{ kapsule_name }}.kubeconfig.yml"
        content: |-
          {{ tf_apply.outputs.kubeconfig_file.value }}
      when: tf_action == 'apply'

    - name: Render kapsule info as ansible var file
      delegate_to: localhost
      lineinfile:
        path: "{{ workspace_host_vars_dir }}/tf_kapsules.yml"
        create: yes
        insertbefore: BOF
        line: "{{ item }}"
      loop:
        - "kapsules:"
        - "---"
      when: tf_action == 'apply'

    - name: Render kapsule info as ansible var file
      delegate_to: localhost
      blockinfile:
        dest: "{{ workspace_host_vars_dir }}/tf_kapsules.yml"
        marker: "{{ block_marker }}"
        insertafter: "kapsule:"
        block: |
          {{ '  ' + kapsule_name }}:
              wildcard_dns: "{{ tf_apply.outputs.wildcard_dns.value }}"
              apiserver_url: "{{ tf_apply.outputs.apiserver_url.value }}"
      when: tf_action == 'apply'
